<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dual OSC Video Synthesizer</title>
    <style>
        body {
            margin: 0;
            padding: 20px;
            background: #0a0a0a;
            color: #fff;
            font-family: 'Courier New', monospace;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        
        #canvas {
            border: 2px solid #333;
            background: #000;
            margin: 20px 0;
            image-rendering: pixelated;
        }
        
        .controls {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            width: 800px;
            margin-top: 20px;
        }
        
        .osc-panel {
            background: #1a1a1a;
            padding: 15px;
            border-radius: 8px;
            border: 1px solid #333;
        }
        
        .osc-panel h3 {
            margin-top: 0;
            text-align: center;
        }
        
        .osc1-title { color: #ff4444; }
        .osc2-title { color: #44ff44; }
        
        .control-group {
            margin: 10px 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        label {
            font-size: 11px;
            color: #999;
            width: 60px;
        }
        
        input[type="range"] {
            width: 120px;
        }
        
        .value {
            color: #4fc3f7;
            font-size: 11px;
            width: 45px;
            text-align: right;
        }
        
        .modulation-section {
            margin-top: 20px;
            padding: 15px;
            background: #1a1a1a;
            border-radius: 8px;
            width: 800px;
        }
        
        h4 {
            color: #8888ff;
            margin: 10px 0 15px 0;
            font-size: 12px;
            text-align: center;
        }
        
        .mod-controls {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 15px;
        }
        
        .mod-group {
            background: #0a0a0a;
            padding: 10px;
            border-radius: 5px;
        }
        
        .mod-group h5 {
            margin: 0 0 10px 0;
            color: #ffaa44;
            font-size: 10px;
            text-align: center;
        }
        
        select {
            background: #222;
            color: #fff;
            border: 1px solid #444;
            padding: 2px;
            font-size: 11px;
        }
        
        .preset-buttons {
            display: flex;
            gap: 10px;
            margin: 15px 0;
            justify-content: center;
        }
        
        .preset-btn {
            padding: 5px 15px;
            background: #222;
            border: 1px solid #444;
            color: #aaa;
            cursor: pointer;
            font-size: 11px;
            border-radius: 3px;
        }
        
        .preset-btn:hover {
            background: #333;
            color: #fff;
        }
        
        #info {
            margin-top: 10px;
            font-size: 11px;
            color: #666;
            text-align: center;
        }
    </style>
</head>
<body>
    <h2>DUAL OSC VIDEO SYNTHESIZER</h2>
    <canvas id="canvas" width="800" height="450"></canvas>
    
    <div class="preset-buttons">
        <button class="preset-btn" onclick="loadPreset('plasma')">PLASMA</button>
        <button class="preset-btn" onclick="loadPreset('interference')">INTERFERENCE</button>
        <button class="preset-btn" onclick="loadPreset('psychedelic')">PSYCHEDELIC</button>
        <button class="preset-btn" onclick="loadPreset('minimal')">MINIMAL</button>
        <button class="preset-btn" onclick="loadPreset('chaos')">CHAOS</button>
    </div>
    
    <div class="controls">
        <div class="osc-panel">
            <h3 class="osc1-title">OSC 1 → RED CHANNEL</h3>
            <div class="control-group">
                <label>FREQ</label>
                <input type="range" id="osc1freq" min="0.01" max="20" step="0.01" value="1.0">
                <span class="value" id="osc1freq-val">1.00</span>
            </div>
            <div class="control-group">
                <label>PHASE</label>
                <input type="range" id="osc1phase" min="0" max="360" step="1" value="0">
                <span class="value" id="osc1phase-val">0°</span>
            </div>
            <div class="control-group">
                <label>AMP</label>
                <input type="range" id="osc1amp" min="0" max="1" step="0.01" value="0.8">
                <span class="value" id="osc1amp-val">0.80</span>
            </div>
            <div class="control-group">
                <label>H.FREQ</label>
                <input type="range" id="osc1hfreq" min="0.01" max="20" step="0.01" value="2.0">
                <span class="value" id="osc1hfreq-val">2.00</span>
            </div>
            <div class="control-group">
                <label>V.FREQ</label>
                <input type="range" id="osc1vfreq" min="0.01" max="20" step="0.01" value="3.0">
                <span class="value" id="osc1vfreq-val">3.00</span>
            </div>
            <div class="control-group">
                <label>WAVE</label>
                <select id="osc1wave" style="width: 120px;">
                    <option value="sine">SINE</option>
                    <option value="saw">SAW</option>
                    <option value="square">SQUARE</option>
                    <option value="tri">TRIANGLE</option>
                    <option value="noise">NOISE</option>
                </select>
            </div>
        </div>
        
        <div class="osc-panel">
            <h3 class="osc2-title">OSC 2 → GREEN CHANNEL</h3>
            <div class="control-group">
                <label>FREQ</label>
                <input type="range" id="osc2freq" min="0.01" max="20" step="0.01" value="1.5">
                <span class="value" id="osc2freq-val">1.50</span>
            </div>
            <div class="control-group">
                <label>PHASE</label>
                <input type="range" id="osc2phase" min="0" max="360" step="1" value="90">
                <span class="value" id="osc2phase-val">90°</span>
            </div>
            <div class="control-group">
                <label>AMP</label>
                <input type="range" id="osc2amp" min="0" max="1" step="0.01" value="0.6">
                <span class="value" id="osc2amp-val">0.60</span>
            </div>
            <div class="control-group">
                <label>H.FREQ</label>
                <input type="range" id="osc2hfreq" min="0.01" max="20" step="0.01" value="2.5">
                <span class="value" id="osc2hfreq-val">2.50</span>
            </div>
            <div class="control-group">
                <label>V.FREQ</label>
                <input type="range" id="osc2vfreq" min="0.01" max="20" step="0.01" value="4.0">
                <span class="value" id="osc2vfreq-val">4.00</span>
            </div>
            <div class="control-group">
                <label>WAVE</label>
                <select id="osc2wave" style="width: 120px;">
                    <option value="sine">SINE</option>
                    <option value="saw">SAW</option>
                    <option value="square">SQUARE</option>
                    <option value="tri">TRIANGLE</option>
                    <option value="noise">NOISE</option>
                </select>
            </div>
        </div>
    </div>
    
    <div class="modulation-section">
        <h4>MODULATION & BLUE CHANNEL</h4>
        <div class="mod-controls">
            <div class="mod-group">
                <h5>CROSS MOD</h5>
                <div class="control-group">
                    <label>X-MOD</label>
                    <input type="range" id="xmod" min="0" max="1" step="0.01" value="0.3">
                    <span class="value" id="xmod-val">0.30</span>
                </div>
            </div>
            
            <div class="mod-group">
                <h5>BLUE OSC</h5>
                <div class="control-group">
                    <label>FREQ</label>
                    <input type="range" id="bluefreq" min="0.01" max="20" step="0.01" value="0.7">
                    <span class="value" id="bluefreq-val">0.70</span>
                </div>
            </div>
            
            <div class="mod-group">
                <h5>FEEDBACK</h5>
                <div class="control-group">
                    <label>AMT</label>
                    <input type="range" id="feedback" min="0" max="0.98" step="0.01" value="0">
                    <span class="value" id="feedback-val">0.00</span>
                </div>
            </div>
            
            <div class="mod-group">
                <h5>COLOR MIX</h5>
                <select id="mixmode">
                    <option value="add">ADDITIVE</option>
                    <option value="multiply">MULTIPLY</option>
                    <option value="difference">DIFFERENCE</option>
                    <option value="xor">XOR</option>
                </select>
            </div>
        </div>
    </div>
    
    <div id="info">EXPONENTIAL FREQUENCY → COLOR MAPPING | OSC1→R | OSC2→G | MOD→B</div>
    
    <script>
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        
        // 影像緩衝
        const width = canvas.width;
        const height = canvas.height;
        const imageData = ctx.createImageData(width, height);
        const pixels = imageData.data;
        
        // 回饋緩衝
        let feedbackBuffer = new Uint8ClampedArray(width * height * 4);
        
        let time = 0;
        
        // 更新控制值顯示
        document.querySelectorAll('input[type="range"]').forEach(input => {
            input.addEventListener('input', (e) => {
                const valueSpan = document.getElementById(e.target.id + '-val');
                if (valueSpan) {
                    let val = e.target.value;
                    if (e.target.id.includes('phase')) {
                        val += '°';
                    } else if (e.target.id.includes('freq') || e.target.id.includes('amp') || 
                               e.target.id.includes('xmod') || e.target.id.includes('feedback')) {
                        val = parseFloat(val).toFixed(2);
                    }
                    valueSpan.textContent = val;
                }
            });
        });
        
        // 預設
        function loadPreset(name) {
            const presets = {
                plasma: {
                    osc1freq: 2.0, osc1hfreq: 3.0, osc1vfreq: 4.0, osc1amp: 0.8,
                    osc2freq: 2.5, osc2hfreq: 4.0, osc2vfreq: 3.5, osc2amp: 0.7,
                    bluefreq: 1.5, xmod: 0.5, feedback: 0.2
                },
                interference: {
                    osc1freq: 8.0, osc1hfreq: 12.0, osc1vfreq: 10.0, osc1amp: 0.6,
                    osc2freq: 7.5, osc2hfreq: 11.0, osc2vfreq: 13.0, osc2amp: 0.6,
                    bluefreq: 15.0, xmod: 0.8, feedback: 0.1
                },
                psychedelic: {
                    osc1freq: 0.5, osc1hfreq: 1.0, osc1vfreq: 1.5, osc1amp: 1.0,
                    osc2freq: 0.7, osc2hfreq: 1.3, osc2vfreq: 0.9, osc2amp: 1.0,
                    bluefreq: 0.3, xmod: 0.7, feedback: 0.5
                },
                minimal: {
                    osc1freq: 1.0, osc1hfreq: 1.0, osc1vfreq: 0.0, osc1amp: 0.5,
                    osc2freq: 0.0, osc2hfreq: 1.0, osc2vfreq: 1.0, osc2amp: 0.5,
                    bluefreq: 0.0, xmod: 0.0, feedback: 0.0
                },
                chaos: {
                    osc1freq: 17.3, osc1hfreq: 13.7, osc1vfreq: 19.1, osc1amp: 1.0,
                    osc2freq: 15.9, osc2hfreq: 18.3, osc2vfreq: 14.7, osc2amp: 1.0,
                    bluefreq: 20.0, xmod: 1.0, feedback: 0.7
                }
            };
            
            const preset = presets[name];
            if (preset) {
                Object.keys(preset).forEach(key => {
                    const input = document.getElementById(key);
                    if (input) {
                        input.value = preset[key];
                        input.dispatchEvent(new Event('input'));
                    }
                });
            }
        }
        
        function animate() {
            // 讀取參數
            const osc1freq = parseFloat(document.getElementById('osc1freq').value);
            const osc1phase = parseFloat(document.getElementById('osc1phase').value) * Math.PI / 180;
            const osc1amp = parseFloat(document.getElementById('osc1amp').value);
            const osc1hfreq = parseFloat(document.getElementById('osc1hfreq').value);
            const osc1vfreq = parseFloat(document.getElementById('osc1vfreq').value);
            const osc1wave = document.getElementById('osc1wave').value;
            
            const osc2freq = parseFloat(document.getElementById('osc2freq').value);
            const osc2phase = parseFloat(document.getElementById('osc2phase').value) * Math.PI / 180;
            const osc2amp = parseFloat(document.getElementById('osc2amp').value);
            const osc2hfreq = parseFloat(document.getElementById('osc2hfreq').value);
            const osc2vfreq = parseFloat(document.getElementById('osc2vfreq').value);
            const osc2wave = document.getElementById('osc2wave').value;
            
            const bluefreq = parseFloat(document.getElementById('bluefreq').value);
            const xmod = parseFloat(document.getElementById('xmod').value);
            const feedbackAmt = parseFloat(document.getElementById('feedback').value);
            const mixmode = document.getElementById('mixmode').value;
            
            const t = time * 0.01;
            
            // 波形生成函數
            function waveform(value, type) {
                switch(type) {
                    case 'sine':
                        return Math.sin(value);
                    case 'saw':
                        const sawPhase = (value / (Math.PI * 2)) % 1;
                        return sawPhase * 2 - 1;
                    case 'square':
                        return Math.sin(value) > 0 ? 1 : -1;
                    case 'tri':
                        const triPhase = (value / (Math.PI * 2)) % 1;
                        return triPhase < 0.5 ? (triPhase * 4 - 1) : (3 - triPhase * 4);
                    case 'noise':
                        return Math.random() * 2 - 1;
                    default:
                        return Math.sin(value);
                }
            }
            
            // 逐像素生成
            for (let y = 0; y < height; y++) {
                for (let x = 0; x < width; x++) {
                    const index = (y * width + x) * 4;
                    
                    // 正規化座標
                    const nx = x / width;
                    const ny = y / height;
                    
                    // OSC1 → 紅色通道 (單極性映射)
                    const r1 = waveform(nx * osc1hfreq * Math.PI * 2 + t * osc1freq + osc1phase, osc1wave);
                    const r2 = waveform(ny * osc1vfreq * Math.PI * 2 + t * osc1freq * 0.7, osc1wave);
                    const r3 = waveform((nx + ny) * osc1freq * Math.PI + t * osc1freq * 1.3, osc1wave);
                    // 將雙極性 (-1 到 1) 轉換為單極性 (0 到 1)
                    let red = ((r1 * 0.5 + 0.5) + (r2 * 0.5 + 0.5) + (r3 * 0.5 + 0.5)) / 3 * osc1amp;
                    
                    // OSC2 → 綠色通道 (單極性映射)
                    const g1 = waveform(nx * osc2hfreq * Math.PI * 2 + t * osc2freq + osc2phase, osc2wave);
                    const g2 = waveform(ny * osc2vfreq * Math.PI * 2 + t * osc2freq * 0.8, osc2wave);
                    const g3 = waveform((nx - ny) * osc2freq * Math.PI + t * osc2freq * 1.1, osc2wave);
                    // 將雙極性轉換為單極性
                    let green = ((g1 * 0.5 + 0.5) + (g2 * 0.5 + 0.5) + (g3 * 0.5 + 0.5)) / 3 * osc2amp;
                    
                    // 交叉調變 → 藍色通道
                    const b1 = Math.sin((nx * ny) * bluefreq * Math.PI * 4 + t * bluefreq);
                    const b2 = Math.sin((red - green) * xmod * Math.PI * 2);
                    let blue = (b1 * 0.5 + 0.5) * (b2 * 0.5 + 0.5);
                    
                    // 混合模式
                    switch(mixmode) {
                        case 'multiply':
                            red *= (1 + green * xmod);
                            green *= (1 + blue * xmod);
                            blue *= (1 + red * xmod);
                            break;
                        case 'difference':
                            red = Math.abs(red - green * xmod);
                            green = Math.abs(green - blue * xmod);
                            blue = Math.abs(blue - red * xmod);
                            break;
                        case 'xor':
                            const xorVal = (Math.floor(red * 255) ^ Math.floor(green * 255)) / 255;
                            blue *= xorVal;
                            break;
                    }
                    
                    // 回饋混合
                    if (feedbackAmt > 0) {
                        red = red * (1 - feedbackAmt) + feedbackBuffer[index] / 255 * feedbackAmt;
                        green = green * (1 - feedbackAmt) + feedbackBuffer[index + 1] / 255 * feedbackAmt;
                        blue = blue * (1 - feedbackAmt) + feedbackBuffer[index + 2] / 255 * feedbackAmt;
                    }
                    
                    // 寫入像素
                    pixels[index] = Math.min(255, red * 255);
                    pixels[index + 1] = Math.min(255, green * 255);
                    pixels[index + 2] = Math.min(255, blue * 255);
                    pixels[index + 3] = 255;
                    
                    // 儲存到回饋緩衝
                    feedbackBuffer[index] = pixels[index];
                    feedbackBuffer[index + 1] = pixels[index + 1];
                    feedbackBuffer[index + 2] = pixels[index + 2];
                    feedbackBuffer[index + 3] = 255;
                }
            }
            
            // 繪製到畫布
            ctx.putImageData(imageData, 0, 0);
            
            time++;
            requestAnimationFrame(animate);
        }
        
        animate();
    </script>
</body>
</html>